"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatenotes_app"]("main",{

/***/ "./script/script.js":
/*!**************************!*\
  !*** ./script/script.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var animejs_lib_anime_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! animejs/lib/anime.es.js */ \"./node_modules/animejs/lib/anime.es.js\");\n/* harmony import */ var _loading_indicator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loading-indicator.js */ \"./script/loading-indicator.js\");\n/* harmony import */ var _loading_indicator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_loading_indicator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _note_item_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note-item.js */ \"./script/note-item.js\");\n/* harmony import */ var _note_item_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_note_item_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _app_bar_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app-bar.js */ \"./script/app-bar.js\");\n/* harmony import */ var _app_bar_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_app_bar_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _note_form_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./note-form.js */ \"./script/note-form.js\");\n/* harmony import */ var _note_form_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_note_form_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _style_style_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../style/style.css */ \"./style/style.css\");\n\n\n\n\n\n\n\nlet notesData = [];\n\n// Fungsi Animasi\nfunction animateNoteItem(element) {\n  (0,animejs_lib_anime_es_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n    targets: element,\n    opacity: [0, 1],\n    translateY: [50, 0],\n    duration: 800,\n    easing: 'easeOutExpo',\n  });\n}\n\nconst notesGridActive = document.getElementById('notesGridActive');\nconst notesGridArchived = document.getElementById('notesGridArchived');\nconst addNoteForm = document.getElementById('addNoteForm');\n\n// Fungsi fetch data aktif & arsip\nasync function fetchActiveNotesFromAPI() {\n  try {\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n    const response = await fetch('https://notes-api.dicoding.dev/v2/notes');\n    const { data } = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching active notes:', error);\n    return [];\n  }\n}\n\nasync function fetchArchivedNotesFromAPI() {\n  try {\n    const response = await fetch(\n      'https://notes-api.dicoding.dev/v2/notes/archived',\n    );\n    const { data } = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching archived notes:', error);\n    return [];\n  }\n}\n\n// Menampilkan catatan aktif & arsip\nasync function displayActiveAndArchivedNotes() {\n  notesGridActive.innerHTML = '';\n  notesGridArchived.innerHTML = '';\n\n  // Menampilkan indikator loading di keduanya\n  const loadingActive = document.createElement('loading-indicator');\n  const loadingArchived = document.createElement('loading-indicator');\n  notesGridActive.appendChild(loadingActive);\n  notesGridArchived.appendChild(loadingArchived);\n\n  try {\n    const [activeNotes, archivedNotes] = await Promise.all([\n      fetchActiveNotesFromAPI(),\n      fetchArchivedNotesFromAPI(),\n    ]);\n\n    notesGridActive.innerHTML = '';\n    notesGridArchived.innerHTML = '';\n\n    notesData = activeNotes;\n\n    // Render catatan aktif\n    activeNotes.forEach((note) => {\n      const noteItem = document.createElement('note-item');\n      noteItem.noteData = note;\n      notesGridActive.appendChild(noteItem);\n      // Animasi\n      animateNoteItem(noteItem);\n    });\n\n    // Render catatan arsip\n    archivedNotes.forEach((note) => {\n      const noteItem = document.createElement('note-item');\n      noteItem.noteData = note;\n      notesGridArchived.appendChild(noteItem);\n      // Animasi\n      animateNoteItem(noteItem);\n    });\n  } catch (error) {\n    console.error('Error fetching notes:', error);\n    alert('Gagal memuat catatan. Silahkan cek koneksi atau coba lagi.');\n    notesGridActive.innerHTML = '<p>Gagal memuat catatan aktif.</p>';\n    notesGridArchived.innerHTML = '<p>Gagal memuat catatan arsip.</p>';\n  }\n}\n\n// Event Listener: Archive/Unarchive\nnotesGridActive.addEventListener('archive-note', async (event) => {\n  const noteId = event.detail.id;\n  try {\n    const response = await fetch(\n      `https://notes-api.dicoding.dev/v2/notes/${noteId}/archive`,\n      {\n        method: 'POST',\n      },\n    );\n    if (response.ok) {\n      displayActiveAndArchivedNotes();\n    } else {\n      console.error('Gagal mengarsipkan catatan.');\n    }\n  } catch (error) {\n    console.error('Error saat mengarsipkan catatan:', error);\n    alert('Terjadi kesalahan saat mengarsipkan catatan: ' + error.message);\n  }\n});\n\nnotesGridArchived.addEventListener('unarchive-note', async (event) => {\n  const noteId = event.detail.id;\n  try {\n    const response = await fetch(\n      `https://notes-api.dicoding.dev/v2/notes/${noteId}/unarchive`,\n      {\n        method: 'POST',\n      },\n    );\n    if (response.ok) {\n      displayActiveAndArchivedNotes();\n    } else {\n      console.error('Gagal membatalkan arsip catatan.');\n      alert('Gagal membatalkan arsip catatan. Server mengembalikan error.');\n    }\n  } catch (error) {\n    console.error('Error saat membatalkan arsip catatan:', error);\n    alert('Terjadi kesalahan saat membatalkan arsip: ' + error.message);\n  }\n});\n\n// Event Listener Delete Note\nnotesGridActive.addEventListener('delete-note', async (event) => {\n  const noteId = event.detail.id;\n  try {\n    const response = await fetch(\n      `https://notes-api.dicoding.dev/v2/notes/${noteId}`,\n      {\n        method: 'DELETE',\n      },\n    );\n    if (response.ok) {\n      displayActiveAndArchivedNotes();\n    } else {\n      console.error('Gagal menghapus catatan.');\n      alert('Gagal menghapus catatan. Server mengembalikan error.');\n    }\n  } catch (error) {\n    console.error('Error saat menghapus catatan:', error);\n    alert('Terjadi kesalahan saat menghapus catatan: ' + error.message);\n  }\n});\n\n// Fungsi catatan di arsip juga bisa dihapus\nnotesGridArchived.addEventListener('delete-note', async (event) => {\n  const noteId = event.detail.id;\n  try {\n    const response = await fetch(\n      `https://notes-api.dicoding.dev/v2/notes/${noteId}`,\n      {\n        method: 'DELETE',\n      },\n    );\n    if (response.ok) {\n      displayActiveAndArchivedNotes();\n    } else {\n      console.error('Gagal menghapus catatan.');\n      alert('Gagal menghapus catatan. Server mengembalikan error.');\n    }\n  } catch (error) {\n    console.error('Error saat menghapus catatan:', error);\n    alert('Terjadi kesalahan saat menghapus catatan: ' + error.message);\n  }\n});\n\n// Event Listener Form Submit\nif (addNoteForm) {\naddNoteForm.addEventListener('submit', async function (event) {\n  event.preventDefault();\n  const title = document.getElementById('noteTitle').value;\n  const body = document.getElementById('noteBody').value;\n\n  const newNote = { title, body };\n\n  try {\n    const response = await fetch('https://notes-api.dicoding.dev/v2/notes', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(newNote),\n    });\n\n    if (response.ok) {\n      displayActiveAndArchivedNotes();\n    } else {\n      console.error('Gagal menambahkan catatan ke API.');\n      alert('Gagal menambahkan catatan ke API.');\n    }\n  } catch (error) {\n    console.error('Error saat menambahkan catatan:', error);\n    alert('Terjadi kesalahan saat menambahkan catatan: ' + error.message);\n  }\n\n  this.reset();\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', displayActiveAndArchivedNotes);\n\n\n//# sourceURL=webpack://notes-app/./script/script.js?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("def3bc11ba93d25ef7c4")
/******/ })();
/******/ 
/******/ }
);